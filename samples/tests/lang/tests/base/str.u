def __test_split() {
    assert_eq(''.words().to(List), [''])
    assert_eq('asdf'.words().to(List), ['asdf'])
    assert_eq('aaa bbb ccdd'.words().to(List), ['aaa', 'bbb', 'ccdd'])
    assert_eq("hello world".words().to(List), ['hello', 'world'])

    assert_eq(
        'hello world'.lines().to(List),
        ['hello world'],
    )
    assert_eq(
        'hello world\nhello world again'.lines().to(List),
        ['hello world', 'hello world again'],
    )
    assert_eq(
        'hello world\nhello world again\n'.lines().to(List),
        ['hello world', 'hello world again', ''],
    )
    assert_eq(
        'hello world\n\nhello world again\n'.lines().to(List),
        ['hello world', '', 'hello world again', ''],
    )
    assert_eq(
        'hello world\n\nhello world again\n\n'.lines().to(List),
        ['hello world','', 'hello world again', '', ''],
    )

    assert_eq(''.split('01').list(), [''])
    assert_eq('a01'.split('01').list(), ['a', ''])
    assert_eq('a01xx'.split('01').list(), ['a', 'xx'])
    assert_eq('abc01fff02jjjj hi**'.split('01').list(), ['abc', 'fff02jjjj hi**'])
    assert_eq('abc01fff02jjjj hi**01'.split('01').list(), ['abc', 'fff02jjjj hi**', ''])
}

def __test_rust_style_string_literal() {
    assert_eq(
        r###"
        Hello world
        "###,
        """
        Hello world
        """,
    )

    assert_eq(
        r###"
        ##"
        "###,
        """
        ##"
        """,
    )

    assert_eq(
        r###"
        "##
        "###,
        """
        "##
        """,
    )

    assert_eq(
        r###"
        r###"
        "###,
        """
        r###"
        """,
    )
}

def __test_fmt_str() {
    assert_eq('hello %s' % ['bob'], 'hello bob')
    assert_eq('hello %r' % ['bob'], 'hello "bob"')
    assert_throws(def = 'hello %s' % [])
    assert_throws(def = 'hello %s' % ['a', 'b'])
}

def __test_slice() {
    assert_eq('hello'[1:], 'ello')
    assert_eq('hello'[0: -1], 'hell')
    assert_eq('hello'[1: -1], 'ell')
    assert_eq('hello'['hello'.len(): 'hello'.len()], '')
    assert_eq('hello'['hello'.len(): 'hello'.len() + 2], '')
    assert_eq('hello'[20: 20], '')
    assert_eq('hello'[:-1], 'hell')
}

def __test_find() {
    s = 'a ab abc abcd abcde abcdef'
    pat = 'abc'
    assert_eq(s.find('xyz'), nil)
    assert_eq(s.find('aaa'), nil)
    assert_eq(s.find('a'), 0)
    assert_eq(s.slice(s.find(pat), s.find(pat) + pat.len()), pat)

    new_start = s.find(pat) + pat.len()
    new_end = s.rfind(pat)
    assert_eq(
        s.slice(
            s.find(pat, new_start),
            new_end,
        ),
        'abcd abcde ',
    )
    assert_eq(
        s.slice(
            s.find(pat, new_start),
            s.rfind(pat, new_start, new_end),
        ),
        'abcd ',
    )
}


def __test_join() {
    assert_eq(''.join([]), '')
    assert_eq('x'.join([]), '')
    assert_eq(''.join(['a', 'bb', 'ccc']), 'abbccc')
    assert_eq('x'.join(['a', 'bb', 'ccc']), 'axbbxccc')
    assert_eq(''.join(['hi']), 'hi')
    assert_eq('x'.join(['hi']), 'hi')
    assert_eq('x'.join(['', 'a']), 'xa')
    assert_eq('x'.join(['a', '']), 'ax')
    assert_eq('x'.join(['', '']), 'x')
}

def __test_ord_chr() {
    assert_eq(ord('a'), 97)
    assert_eq(chr(97), 'a')
    assert_eq(chr(98), 'b')
    cap_diff = ord('A') - ord('a')
    assert_eq(chr(ord('c') + cap_diff), 'C')
    assert_eq(chr(ord('d') + cap_diff), 'D')
    assert_throws(def = ord('ab'))
    assert_throws(def = ord(''))
    assert_throws(def = chr(-1))
}

def __test_char_escapes() {
    assert_eq('\x21', '!')
    assert_eq('\x41', 'A')
    assert_eq('\x41\x21', 'A!')
    assert_eq('\o{100}', '@')
    assert_eq('\o{100}\o{100}', '@@')
    assert_eq('\u{1F914}', 'ðŸ¤”')
    assert_eq('\d{81}\u{1F914}', 'QðŸ¤”')
}

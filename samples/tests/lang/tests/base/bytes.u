# TOOD: uncomment this test
from a.bytes import Bytes

def __test_a() {
    # assert_eq(Bytes([1, 2, 3]), "")
}

# def __test_patterns() {
#     assert_eq(
#         Bytes('hello'),
#         Bytes([
#             ord('h'),
#             ord('e'),
#             ord('l'),
#             ord('l'),
#             ord('o'),
#         ]),
#     )
#     assert_eq(
#         Bytes('hello'),
#         Bytes(['hel', 'lo']),
#     )
#     assert_eq(
#         Bytes('hello'),
#         Bytes(['hel', [ord('l'), ord('o')]]),
#     )
#     assert_eq(
#         Bytes('hello'),
#         Bytes([Bytes('hel'), [ord('l'), ord('o')]]),
#     )
#     assert_eq(Bytes('hello').len(), 5)
# }

# def __test_le_be() {
#     LE = Bytes.le
#     BE = Bytes.be

#     assert_eq(
#         LE(1, 14),
#         Bytes([14]),
#     )
#     assert_eq(
#         LE(2, 14),
#         Bytes([14, 0]),
#     )
#     assert_eq(
#         LE(4, 14),
#         Bytes([14, 0, 0, 0]),
#     )
#     assert_eq(
#         LE(8, 14),
#         Bytes([14, 0, 0, 0, 0, 0, 0, 0]),
#     )

#     assert_eq(
#         BE(1, 14),
#         Bytes([14]),
#     )
#     assert_eq(
#         BE(2, 14),
#         Bytes([0, 14]),
#     )
#     assert_eq(
#         BE(4, 14),
#         Bytes([0, 0, 0, 14]),
#     )
#     assert_eq(
#         BE(8, 14),
#         Bytes([0, 0, 0, 0, 0, 0, 0, 14]),
#     )

#     assert_eq(
#         BE(8, 4.4),
#         Bytes([64, 17, 153, 153, 153, 153, 153, 154]),
#     )
#     assert_eq(
#         LE(8, 4.4),
#         Bytes([154, 153, 153, 153, 153, 153, 17, 64]),
#     )

#     # Should throw on invalid bytecount
#     # (For floats, bytecount must be 4 or 8,
#     # for integers, it must be 1, 2, 4 or 8)
#     assert_throws(def = BE(0, 0))
#     assert_throws(def = BE(3, 0))
# }

# def __test_iter() {
#     list = []
#     for i in Bytes([11, 22, 33]) {
#         list.push(i)
#     }
#     assert_eq(list, [11, 22, 33])

#     assert_eq(
#         [44, 55, 66].to(Bytes),
#         Bytes([44, 55, 66]),
#     )
#     assert_eq(
#         [44, [55, 77], 66].to(Bytes),
#         Bytes([44, 55, 77, 66]),
#     )

#     list = Bytes([66, 77, 88]).to(List)
#     assert_eq(list, [66, 77, 88])
# }

# def __test_slice_and_getitem() {
#     bytes = Bytes([77, 88, 99])
#     assert_eq(bytes[0], 77)
#     assert_eq(bytes[1], 88)
#     assert_eq(bytes[2], 99)
#     assert_eq(bytes[-1], 99)
#     assert_eq(bytes[1:-1], Bytes([88]))
# }

# def __test_reading_ints() {
#     bytes = Bytes([1, 2, 3, 4, 5, 6, 7, 8])

#     def le(n) = range(n).map(def(i) = (i + 1) * 2 ** (8 * i)).fold(0, def(a, b) = a + b)
#     def be(n) = range(n).map(def(i) = (n - i) * 2 ** (8 * i)).fold(0, def(a, b) = a + b)

#     # endiannes omitted (implies 'little')
#     # print(range(8).map(def(i) = (i + 1) * 8 ** i).list())
#     assert_eq(bytes.int(8, 0), le(8))
#     assert_eq(bytes.int(4, 0), le(4))
#     assert_eq(bytes.int(2, 0), le(2))
#     assert_eq(bytes.int(1, 0), le(1))
#     assert_eq(bytes.int(4, 0), le(4))

#     assert_eq(bytes.int(8, 0, endian='little'), le(8))
#     assert_eq(bytes.int(4, 0, endian='little'), le(4))
#     assert_eq(bytes.int(2, 0, endian='little'), le(2))
#     assert_eq(bytes.int(1, 0, endian='little'), le(1))
#     assert_eq(bytes.int(4, 0, endian='little'), le(4))

#     assert_eq(bytes.int(8, 0, endian='big'), be(8))
#     assert_eq(bytes.int(4, 0, endian='big'), be(4))
#     assert_eq(bytes.int(2, 0, endian='big'), be(2))
#     assert_eq(bytes.int(1, 0, endian='big'), be(1))
#     assert_eq(bytes.int(4, 0, endian='big'), be(4))

#     # uint of 8-bytes won't fit in Int
#     assert_throws(def = bytes.uint(8, 0))
#     assert_eq(bytes.uint(4, 0), le(4))
#     assert_eq(bytes.uint(2, 0), le(2))
#     assert_eq(bytes.uint(1, 0), le(1))
#     assert_eq(bytes.uint(4, 0), le(4))

#     assert_eq(bytes.uint(4, 0, endian='little'), le(4))
#     assert_eq(bytes.uint(2, 0, endian='little'), le(2))
#     assert_eq(bytes.uint(1, 0, endian='little'), le(1))
#     assert_eq(bytes.uint(4, 0, endian='little'), le(4))

#     assert_eq(bytes.uint(4, 0, endian='big'), be(4))
#     assert_eq(bytes.uint(2, 0, endian='big'), be(2))
#     assert_eq(bytes.uint(1, 0, endian='big'), be(1))
#     assert_eq(bytes.uint(4, 0, endian='big'), be(4))

#     # From non-zero offset
#     bytes = Bytes([53, 1, 2, 3, 4, 5, 6, 7, 8])
#     assert_eq(bytes.int(8, 1), le(8))
#     assert_eq(bytes.int(4, 1), le(4))
#     assert_eq(bytes.int(2, 1), le(2))
#     assert_eq(bytes.int(1, 1), le(1))
#     assert_eq(bytes.int(4, 1), le(4))

#     # Negative numbers
#     bytes = Bytes([250, 255, 255, 255])
#     assert_eq(bytes.int(1, 0), -6)
#     assert_eq(bytes.int(2, 0), -6)
#     assert_eq(bytes.int(4, 0), -6)
#     assert_eq(bytes.uint(1, 0), 250)
#     assert_eq(bytes.uint(2, 0), 250 + 255 * 2 ** 8)
#     assert_eq(
#         bytes.uint(4, 0),
#         250 + 255 * 2 ** 8 + 255 * 2 ** 16 + 255 * 2 ** 24,
#     )
# }

import a.os
import a.fs

def __test_dir_list() {
    assert(fs.isfile(__file))

    "Check that this script is in this directory"
    dir = fs.dirname(__file)
    assert(fs.isdir(dir))
    assert(fs.ls(dir, path=true).has(__file))

    "Check that the 'os/' directory exists in the grandparent directory"
    dir = fs.dirname(dir)
    assert(fs.isdir(dir))
    assert(fs.ls(dir).map(def(d) = fs.basename(d)).has('os'))
}

def __test_rename() {
    old = __file.parent().join("for.rename.txt")
    new_ = __file.parent().join("for.rename2.txt")
    assert(old.is_file())
    assert(!new_.is_file())

    old.rename(new_)
    assert(!old.is_file())
    assert(new_.is_file())

    new_.rename(old)
    assert(old.is_file())
    assert(!new_.is_file())
}

def __test_read() {
    path = __file.parent().join('for.read.txt')
    data = path.read()
    assert_eq(data, r"""Hello, this is the contents of for.read.txt
This is the second line
""")
}

def __test_write() {
    path = __file.parent().join('for.write.txt')
    contents = 'hello, contents of write'
    assert(!path.is_file())

    pcall(def {
        path.write(contents)
        assert_eq(path.read(), contents)
    }, def {
        "Make sure to clean up, regardless of whether we succeed"
        path.remove_file()
    })
}

def __test_remove() {
    "Make sure that remove_file throws if it's doesn't exist"
    path = __file.parent().join('not.a.real.file.txt')
    assert_throws(def = path.remove_file())

    "Make sure to throw if you try to delete with the wrong method"
    dirpath = __file.parent().join('for.remove.dir')
    dirpath.mkdir()
    assert_throws(def = dirpath.remove_file())
    dirpath.remove_dir()

    filepath = __file.parent().join('for.remove.file.txt')
    filepath.write('hi')
    assert_throws(def = filepath.remove_dir())
    filepath.remove_file()
}

def __test_process_with_working_dir() {
    """
    TODO: Try to address this for windows
    """
    if os.name != "windows" {
        paths = (
            os.run(
                "ls",
                stdout='pipe',
                encoding='utf8',
                dir=__file.parent().parent())[1]
                    .words()
                    .list()
        )
        assert(paths.has(str(__file.parent().basename())))

        paths = (
            os.run(
                "ls",
                stdout='pipe',
                encoding='utf8',
                dir=__file.parent())[1]
                    .words()
                    .list()
        )
        assert(!paths.has(str(__file.parent().basename())))

        "Check that clearing the env works"
        env = os.run("env", stdout='pipe', encoding='utf8')[1].trim()
        assert(env)
        env = os.run("env", stdout='pipe', encoding='utf8', clear_envs=true)[1].trim()
        assert_eq(env, '')
        env = os.run(
            "env",
            stdout='pipe',
            encoding='utf8',
            clear_envs=true,
            envs=['foo' : 'hi'],
        )[1].trim()
        assert_eq(env, 'foo=hi')
    }
}

def __test_env() {
    assert(os.home() is not nil)
}

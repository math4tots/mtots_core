import a.proc
import a.os
import a.fs
import a.env

def __test_dir_list() {
    assert(fs.isfile(__file))

    "Check that this script is in this directory"
    dir = fs.dirname(__file)
    assert(fs.isdir(dir))
    assert(fs.ls(dir, path=true).has(__file))

    "Check that the 'os/' directory exists in the grandparent directory"
    dir = fs.dirname(dir)
    assert(fs.isdir(dir))
    assert(fs.ls(dir).map(def(d) = fs.basename(d)).has('os'))
}

def __test_rename() {
    old = fs.join(fs.dirname(__file), "for.rename.txt")
    new_ = fs.join(fs.dirname(__file), "for.rename2.txt")
    assert(fs.isfile(old))
    assert(!fs.isfile(new_))

    fs.rename(old, new_)
    assert(!fs.isfile(old))
    assert(fs.isfile(new_))

    fs.rename(new_, old)
    assert(fs.isfile(old))
    assert(!fs.isfile(new_))
}

def __test_read() {
    path = fs.join(fs.dirname(__file), 'for.read.txt')
    data = fs.read(path)
    assert_eq(data, r"""Hello, this is the contents of for.read.txt
This is the second line
""")
}

def __test_write() {
    path = fs.join(fs.dirname(__file), 'for.write.txt')
    contents = 'hello, contents of write'
    assert(!fs.isfile(path))

    pcall(def {
        fs.write(path, contents)
        assert_eq(path.read(), contents)
    }, def(_) {
        "Make sure to clean up, regardless of whether we succeed"
        fs.rmfile(path)
    })
}

def __test_remove() {
    "Make sure that rmfile throws if it doesn't exist"
    path = fs.join(fs.dirname(__file), 'not.a.real.file.txt')
    assert_throws(def = fs.rmfile(path))

    "Make sure to throw if you try to delete with the wrong method"
    dirpath = fs.join(fs.dirname(__file), 'for.remove.dir')
    fs.mkdir(dirpath)
    assert_throws(def = fs.rmfile(dirpath))
    fs.rmdir(dirpath)

    filepath = fs.join(fs.dirname(__file), 'for.remove.file.txt')
    fs.write(filepath, 'hi')
    assert_throws(def = fs.rmdir(filepath))
    fs.rmfile(filepath)
}

def __test_process_with_working_dir() {
    """
    TODO: Try to address this for windows
    """
    if os.name != "windows" {
        paths = (
            proc.run(
                "ls",
                stdout='pipe',
                encoding='utf8',
                dir=fs.dirname(fs.dirname(__file)))[1]
                    .words()
                    .list()
        )
        assert(paths.has(str(fs.basename(fs.dirname(__file)))))

        paths = (
            proc.run(
                "ls",
                stdout='pipe',
                encoding='utf8',
                dir=fs.dirname(__file))[1]
                    .words()
                    .list()
        )
        assert(!paths.has(str(fs.basename(fs.dirname(__file)))))

        "Check that clearing the env works"
        env = proc.run("env", stdout='pipe', encoding='utf8')[1].trim()
        assert(env)
        env = proc.run("env", stdout='pipe', encoding='utf8', clear_envs=true)[1].trim()
        assert_eq(env, '')
        env = proc.run(
            "env",
            stdout='pipe',
            encoding='utf8',
            clear_envs=true,
            envs=['foo' : 'hi'],
        )[1].trim()
        assert_eq(env, 'foo=hi')
    }
}

def __test_env() {
    assert(env.home() is not nil)
}

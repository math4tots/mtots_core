

def __test_dir_list() {
    assert(__file.is_file())

    "Check that this script is in this directory"
    dir = __file.parent()
    assert(dir.is_dir())
    assert(dir.list().has(__file))

    "Check that the 'os/' directory exists in the grandparent directory"
    dir = dir.parent()
    assert(dir.is_dir())
    assert(dir.list().map(def(d) = d.basename()).has('os'))
}

def __test_rename() {
    old = __file.parent().join("for.rename.txt")
    new = __file.parent().join("for.rename2.txt")
    assert(old.is_file())
    assert(!new.is_file())

    old.rename(new)
    assert(!old.is_file())
    assert(new.is_file())

    new.rename(old)
    assert(old.is_file())
    assert(!new.is_file())
}

def __test_read() {
    path = __file.parent().join('for.read.txt')
    data = path.read()
    assert_eq(data, r"""Hello, this is the contents of for.read.txt
This is the second line
""")
}

def __test_write() {
    path = __file.parent().join('for.write.txt')
    contents = 'hello, contents of write'
    assert(!path.is_file())

    __try(def {
        path.write(contents)
        assert_eq(path.read(), contents)
    }, def {
        "Make sure to clean up, regardless of whether we succeed"
        path.remove_file()
    })
}

def __test_remove() {
    "Make sure that remove_file throws if it's doesn't exist"
    path = __file.parent().join('not.a.real.file.txt')
    assert_raises(OSError, def = path.remove_file())

    "Make sure to throw if you try to delete with the wrong method"
    dirpath = __file.parent().join('for.remove.dir')
    dirpath.mkdir()
    assert_raises(OSError, def = dirpath.remove_file())
    dirpath.remove_dir()

    filepath = __file.parent().join('for.remove.file.txt')
    filepath.write('hi')
    assert_raises(OSError, def = filepath.remove_dir())
    filepath.remove_file()
}

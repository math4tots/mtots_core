def __test_literals() {
    empty = [:]
    assert_eq(empty.len(), 0)
    assert_eq(str(empty), '[:]')

    single = [1: 'a']
    assert_eq(single.len(), 1)
}

def __test_list_keys() {
    d = [[1, 2, 3]: 'hi', [2, 4]: 'b', [1, 2, 3]: 'c']
    assert_eq(
        str(d),
        '[[1, 2, 3]: "c", [2, 4]: "b"]',
    )
}

def __test_mutable_map() {
    d = [:]
    assert_eq(d.len(), 0)
    assert_eq(d, [:])

    d = [:]
    d[111] = 'aaa'
    assert_eq(d, [111: 'aaa'])
    assert_eq(d.len(), 1)
    d[222] = 'bbb'
    assert_eq(d, [222: 'bbb', 111: 'aaa'])
    assert_eq(d.len(), 2)
    assert_eq(d[222], 'bbb')
    assert(d.has_key(222))
    assert(!d.has_key('bbb'))

    d[222] = 'b2'
    assert(d != [222: 'bbb', 111: 'aaa'])
    assert_eq(d, [222: 'b2', 111: 'aaa'])
    assert_eq(d, [111: 'aaa', 222: 'b2'])

    assert_throws(def = d[333])
}

def __test_from_iterable() {
    map = [[1, 2], [3, 4]].iter().to(Map)
    assert_eq(map, [1: 2, 3: 4])
}

def __test_as_iterable() {
    list = []
    for [k, v] in [1: 2, 3: 4] {
        list.push([k, v])
    }
    assert_eq(list, [[1, 2], [3, 4]])
}

def __test_maps_as_keys() {
    d = [:]
    d[Set([[1, 2], [3, 4]])] = 123
    assert_eq(d[Set([[1, 2], [3, 4]])], 123)
    assert_eq(d[Set([[3, 4], [1, 2]])], 123)
    assert(!d.has_key([[1, 2]]))
    assert(!d.has_key([[1, 2], [3, 4]]))
    assert(d.has_key(Set([[1, 2], [3, 4]])))
    assert_eq(d.len(), 1)
}

def __test_map_getters() {
    d = [1: 2, 'a': 'b']
    assert_eq(d.get(1), 2)
    assert_throws(def = d.get(2))
    assert_eq(d.get(2, nil), nil)
    assert(d.has_key('a'))
    assert(!d.has_key('b'))
    assert_eq(d.len(), 2)
    assert_eq(d[1], 2)
    assert_throws(def = d[2])

    d = [1: 2, 'a': 'b']
    assert_eq(d.get(1), 2)
    assert_throws(def = d.get(2))
    assert_eq(d.get(2, nil), nil)
    assert(d.has_key('a'))
    assert(!d.has_key('b'))
    assert_eq(d.len(), 2)
    assert_eq(d[1], 2)
    assert_throws(def = d[2])
}

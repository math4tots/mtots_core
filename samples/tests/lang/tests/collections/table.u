def __test_str() {
    table = Table(a=3)
    assert_eq(str(table), 'Table(a=3)')

    assert_eq(str(Table(b='asdf', a='zzz')), 'Table(a="zzz", b="asdf")')
}

def __test_attrs() {
    table = Table(a=3, b=5, c=7)

    assert_eq(table, Table(b=5, a=3, c=7))

    assert_eq(table.a, 3)
    assert_eq(table.b, 5)
    assert_eq(table.c, 7)
    assert_eq(table.len(), 3)
}

def __test_add_merge() {
    a = Table(a=123, b=456)
    assert_eq(a.len(), 2)
    assert_eq(a, Table(a=123, b=456))
    assert_eq(a.add(c='c-value'), Table(a=123, b=456, c='c-value'))
    assert_eq(a, Table(a=123, b=456))
    assert_eq(a.add(a='aaa'), Table(a='aaa', b=456))

    b = Table(x='xxx', y='yyy', z='zzz')
    assert_eq(a + b, Table(a=123, b=456, x='xxx', y='yyy', z='zzz'))

    c = Table(a='AAA', z='ZZZ')
    assert_eq(a + c, Table(a='AAA', b=456, z='ZZZ'))

    assert_eq(a + b + c, Table(a='AAA', b=456, x='xxx', y='yyy', z='ZZZ'))

    assert_eq(Table().len(), 0)
    assert_eq(a.merge(b, c), a + b + c)
    assert_eq(Table().merge(a, b, c), a + b + c)
    assert_eq(Table().merge(*[a, b, c]), a + b + c)
}

def __test_keys() {
    t = Table(zzz="zzz", aaa=123, a='a', ccc=['a', 'b', 'c'])
    assert_eq(t.keys(), [:a, :aaa, :ccc, :zzz])

    vals = t.keys().map(def(key) = t.get(key))
    assert_eq(vals, ['a', 123, ['a', 'b', 'c'], 'zzz'])
}

def __test_from_iterable() {
    t = [[:a, 1], [:b, 2.0], [:c, '3']].to(Table)
    assert_eq(t, Table(a=1, b=2.0, c='3'))
}

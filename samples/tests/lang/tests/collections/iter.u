

def __test_map() {
    ""

    """
    'map' can be used in the monad sense,
    """
    assert_eq([1, 2, 3].iter().map(def(x) = x + 1).list(), [2, 3, 4])

    """
    But the 'map' method with no args also builds a map
    from an iterator of pairs
    """
    assert_eq([['a', 1], ['b', 2]].iter().map(), ['a': 1, 'b': 2])
}

def __test_enumerate() {
    assert_eq(
        ['a', 'b', 'c'].iter().enumerate().list(),
        [[0, 'a'], [1, 'b'], [2, 'c']],
    )
    assert_eq(
        ['a', 'b', 'c'].iter().enumerate(10).list(),
        [[10, 'a'], [11, 'b'], [12, 'c']],
    )
    assert_eq(
        ['a', 'b', 'c'].iter().enumerate(-5).list(),
        [[-5, 'a'], [-4, 'b'], [-3, 'c']],
    )

    # Enumerate works with any numbers, including
    # non-integers
    assert_eq(
        ['a', 'b', 'c'].iter().enumerate(1.1).list(),
        [[1.1, "a"], [2.1, "b"], [3.1, "c"]],
    )
}

def __test_zip() {
    assert_eq(
        [1, 2, 3].iter().zip(['a', 'b', 'c']).list(),
        [[1, 'a'], [2, 'b'], [3, 'c']],
    )
    assert_eq(
        [1, 2, 3].iter().zip(['a', 'b', 'c'], ['d', 'e', 'f']).list(),
        [[1, 'a', 'd'], [2, 'b', 'e'], [3, 'c', 'f']],
    )
    assert_eq(
        [1, 2, 3, 4, 5].iter().zip(['a', 'b', 'c'], ['d', 'e', 'f']).list(),
        [[1, 'a', 'd'], [2, 'b', 'e'], [3, 'c', 'f']],
    )
    assert_eq(
        [1, 2, 3].iter().zip(['a', 'b', 'c', 'x', 'y'], ['d', 'e', 'f']).list(),
        [[1, 'a', 'd'], [2, 'b', 'e'], [3, 'c', 'f']],
    )
}

def __test_filter() {
    assert_eq(
        [1, 2, 3, 4, 5].iter().filter(def(x) = x > 3).list(),
        [4, 5],
    )
}

def __test_from_list() {
    """
    Ensure that creating a list from pre-existing list
    does not create a new copy
    """
    list = [1, 2, 3]
    other_list = List(list)
    assert(list is other_list)
    assert(list is not [1, 2, 3])
    assert_eq(list, [1, 2, 3])
}

def __test_from_iterator() {
    """
    Test that you can create a list object from iterators
    """
    assert_eq(List(range(5)), [0, 1, 2, 3, 4])

    original = ['a', 'b', 'c']
    list = List(original.iter())

    assert_eq(list, original)
    assert(list is not original)
}

def __test_mutable_list() {
    list = [1, 2, 3]
    assert_eq(list[0], 1)
    list[0] = 'aaa'
    assert_eq(list[0], 'aaa')
    assert_eq(list, ['aaa', 2, 3])
    assert_eq(list.move(), ['aaa', 2, 3])

    list = []
    for i in range(5, 9) {
        list.push(i)
    }
    assert_eq(list, [5, 6, 7, 8])
    assert_eq(list.move(), [5, 6, 7, 8])
}

def __test_repeat() {
    list = [1, 2, 3]
    assert_eq(list * 3, [1, 2, 3, 1, 2, 3, 1, 2, 3])
}

def __test_any_all() {
    assert_eq([0, 1, 2].all(), false)
    assert_eq([3, 1, 2].all(), true)
    assert_eq([0, 1, 2].all(), false)
    assert_eq([3, 1, 2].all(), true)

    assert_eq([0, false].any(), false)
    assert_eq([3, false].any(), true)
    assert_eq([0, false].any(), false)
    assert_eq([3, false].any(), true)

    assert_eq([1, 12].all(def(x) = x > 10), false)
    assert_eq([11, 12].all(def(x) = x > 10), true)
    assert_eq([1, 12].all(def(x) = x > 10), false)
    assert_eq([11, 12].all(def(x) = x > 10), true)

    assert_eq([1, 12].any(def(x) = x > 10), true)
    assert_eq([1, 2].any(def(x) = x > 10), false)
    assert_eq([1, 12].any(def(x) = x > 10), true)
    assert_eq([1, 2].any(def(x) = x > 10), false)
}

def __test_resize() {
    list = [1, 2, 3, 4]
    list.resize(6)
    assert_eq(list, [1, 2, 3, 4, nil, nil])
    list.resize(2)
    assert_eq(list, [1, 2])
    list = [1, 2, 3, 4]
    list.resize(2)
    assert_eq(list, [1, 2])
    list.resize(2)
    assert_eq(list, [1, 2])
}

def __test_slice() {
    list = [1, 2, 3, 4][1: 2]
    assert_eq(list, [2])
    assert_eq([1, 2, 3, 4][1: -1], [2, 3])
    assert_eq([1, 2, 3, 4][:-1], [1, 2, 3])
    assert_eq([1, 2, 3, 4][-2:], [3, 4])

    list = [1, 2, 3, 4][1: 2]
    assert_eq(list, [2])
    assert_eq([1, 2, 3, 4][1: -1], [2, 3])
    assert_eq([1, 2, 3, 4][:-1], [1, 2, 3])
    assert_eq([1, 2, 3, 4][-2:], [3, 4])
}

def __test_remove() {
    list = ['a', 'b', 'c', 'd', 'e', 'f']
    assert_eq(list.remove(0), 'a')
    assert_eq(list, ['b', 'c', 'd', 'e', 'f'])
    assert_eq(list.remove(-1), 'f')
    assert_eq(list, ['b', 'c', 'd', 'e'])
    assert_eq(list.remove(1), 'c')
    assert_eq(list, ['b', 'd', 'e'])

    assert_throws(def = list.remove(1000))
    assert_eq(list, ['b', 'd', 'e'])

    assert_eq(list.remove(1000, 'some-default'), 'some-default')
    assert_eq(list, ['b', 'd', 'e'])
}

def __test_insert() {
    list = ['a', 'b', 'c', 'd', 'e']
    list.insert(0, 55)
    assert_eq(list, [55, 'a', 'b', 'c', 'd', 'e'])

    list = ['a', 'b', 'c', 'd', 'e']
    list.insert(-1, 55)
    assert_eq(list, ['a', 'b', 'c', 'd', 55, 'e'])

    list = ['a', 'b', 'c', 'd', 'e']
    list.insert(3, 55)
    assert_eq(list, ['a', 'b', 'c', 55, 'd', 'e'])
}

def __test_splice() {
    list = ['a', 'b', 'c', 'd', 'e']
    assert_eq(list.splice(1, 2, [1, 2, 3]), ['b'])
    assert_eq(list, ['a', 1, 2, 3, 'c', 'd', 'e'])

    list = ['a', 'b', 'c', 'd', 'e']
    assert_eq(list.splice(0, 2, [1, 2, 3]), ['a', 'b'])
    assert_eq(list, [1, 2, 3, 'c', 'd', 'e'])

    list = ['a', 'b', 'c', 'd', 'e']
    assert_eq(list.splice(0, 0, [1, 2, 3]), [])
    assert_eq(list, [1, 2, 3, 'a', 'b', 'c', 'd', 'e'])

    list = ['a', 'b', 'c', 'd', 'e']
    assert_eq(list.splice(0, 4, [1, 2, 3]), ['a', 'b', 'c', 'd'])
    assert_eq(list, [1, 2, 3, 'e'])

    list = ['a', 'b', 'c', 'd', 'e']
    assert_eq(list.splice(1, 5, [1, 2, 3]), ['b', 'c', 'd', 'e'])
    assert_eq(list, ['a', 1, 2, 3])

    list = ['a', 'b', 'c', 'd', 'e']
    assert_eq(list.splice(2, nil, [1, 2, 3]), ['c', 'd', 'e'])
    assert_eq(list, ['a', 'b', 1, 2, 3])
}

def __test_zip() {
    assert_eq(
        [1, 2, 3].zip(['a', 'b', 'c']),
        [
            [1, 'a'],
            [2, 'b'],
            [3, 'c'],
        ],
    )
    assert_eq(
        [1, 2, 3].zip(['a', 'b', 'c'], [:x, :y, :z, :xx, :yy, :zz]),
        [
            [1, 'a', :x],
            [2, 'b', :y],
            [3, 'c', :z],
        ],
    )
}

def __test_reverse() {
    xs = [1, 2, 3]
    xs.reverse()
    assert_eq(xs, [3, 2, 1])

    assert_eq([1, 2, 3].reversed(), [3, 2, 1])
}


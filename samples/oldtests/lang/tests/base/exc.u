
def __test_throw() {
    assert_throws(def = throw("hi"))
    assert_throws(def = throw(['a', 'b']))
    assert_throws(def = throw('a', 'b'))
}

def __test_pcall() {

    r##"
    Case 1: Test when exception is thrown and caught
    "##
    side_effects = []

    ret = pcall(def = {
        side_effects.push('before throw')
        throw('hi')
        side_effects.push('after throw')
        'end of main def'
    }, def(e) = {
        assert_eq(e, ["RuntimeError", 'hi'])
        'An exception was caught'
    })

    assert_eq(side_effects, ['before throw'])
    assert_eq(ret, 'An exception was caught')

    r##"
    Case 2: No exception is thrown
    "##
    side_effects = []

    ret = pcall(def = {
        side_effects.push('before throw')
        """
        Don't actually throw anything this time ...
        """
        side_effects.push('after throw')
        'end of main def'
    }, def(e) = {
        'An exception was caught'
    })

    assert_eq(side_effects, ['before throw', 'after throw'])
    assert_eq(ret, 'end of main def')
}

def __test_unpack_msg() {
    error = pcall(def {
        [a, b] = [1, 2, 3]
        nil
    }, def(e) = e)
    assert_eq(error, ['RuntimeError', 'Expected 2 elements but got 3'])
}
